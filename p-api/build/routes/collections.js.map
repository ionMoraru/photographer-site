{"version":3,"sources":["../../src/routes/collections.js"],"names":["router","express","Router","get","req","res","cloudinary","v2","api","sub_folders","error","result","undefined","console","log","json","collections","folders","collectionName","query","resources","type","max_results","prefix","nature","map","separator","id","img","public_id","name","split","pop","format","collection","url","secure_url"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,OAAOG,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1BC,yBAAWC,EAAX,CAAcC,GAAd,CAAkBC,WAAlB,CAA8B,aAA9B,EAA6C,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5D,YAAID,UAAUE,SAAd,EAAyB;AAACC,oBAAQC,GAAR,CAAY,yBAAZ;AAAwC;;AAElET,YAAIU,IAAJ,CAAS,EAAEC,aAAaL,OAAOM,OAAtB,EAAT;AACH,KAJD;AAKH,CAND;;AAQAjB,OAAOG,GAAP,CAAW,SAAX,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,QACxBa,cADwB,GACLd,IAAIe,KADC,CACxBD,cADwB;;;AAGhCZ,yBAAWC,EAAX,CAAcC,GAAd,CAAkBY,SAAlB,CAA4B,EAAEC,MAAM,QAAR,EAAkBC,aAAa,EAA/B,EAAmCC,yBAAuBL,cAAvB,MAAnC,EAA5B,EAA2G,UAACR,KAAD,EAAQC,MAAR,EAAmB;AAC1H,YAAID,UAAUE,SAAd,EAAyB;AAACC,oBAAQC,GAAR,CAAY,yBAAZ;AAAwC;;AAElET,YAAIU,IAAJ,CAAS,EAAES,QAAQb,OAAOS,SAAP,CAAiBK,GAAjB,CAAqB,eAAO;AAC3C,oBAAMC,YAAY,oBAAlB;AACA,uBAAO;AACHC,wBAAIC,IAAIC,SADL;AAEHC,0BAAMF,IAAIC,SAAJ,CAAcE,KAAd,CAAoBL,SAApB,EAA+BM,GAA/B,EAFH;AAGHC,4BAAQL,IAAIK,MAHT;AAIHC,gCAAY,QAJT;AAKHC,yBAAKP,IAAIQ;AALN,iBAAP;AAOH,aATkB,CAAV,EAAT;AAUH,KAbD;AAcH,CAjBD;;kBAmBepC,M","file":"collections.js","sourcesContent":["import express from 'express';\nimport cloudinary from 'cloudinary';\n\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n    cloudinary.v2.api.sub_folders(\"collections\", (error, result) => {\n        if (error !== undefined) {console.log('Error retrieving images');}\n        \n        res.json({ collections: result.folders });\n    });\n})\n\nrouter.get('/images', (req, res) => {\n    const { collectionName } = req.query;\n    \n    cloudinary.v2.api.resources({ type: 'upload', max_results: 50, prefix: `collections/${collectionName}/` }, (error, result) => {\n        if (error !== undefined) {console.log('Error retrieving images');}\n\n        res.json({ nature: result.resources.map(img => {\n            const separator = 'color_photography/';\n            return {\n                id: img.public_id,\n                name: img.public_id.split(separator).pop(),\n                format: img.format,\n                collection: 'Nature',\n                url: img.secure_url,\n            }\n        })});\n    });\n})\n\nexport default router;"]}